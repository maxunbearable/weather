{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKACMA,EACC,mCADDA,EAEE,2CA2DOC,MAxDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAuBA,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,KAAqD,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,WAA0C,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,WAA0C,WAA5BH,EAAQA,QAAQ,GAAGG,KAAqB,aAA4C,SAA5BH,EAAQA,QAAQ,GAAGG,KAAmB,WAAa,MAAS,MAArR,SACI,iCACE,qBAAKD,UAAU,aAAf,SACE,uBAAOE,KAAK,OACZF,UAAU,aACVG,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QACjCA,MAAOX,EACPY,WA9BK,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAWgB,GACXlB,EAAS,IACTmB,QAAQC,IAAIF,WAyBe,oBAAhBjB,EAAQG,KACf,gCACF,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQoB,KAAnC,KAA2CpB,EAAQqB,IAAIC,WACvD,qBAAKpB,UAAU,OAAf,SAzBU,SAACqB,GACnB,IAECC,EADO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAJY,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAI5GL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAiBAE,CAAY,IAAIC,WAEzC,sBAAK/B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGgC,KAAKC,MAAMnC,EAAQG,KAAKiC,MAD3B,WAGA,qBAAKlC,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,aAGb,SC5CNkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ea1cd4df.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nconst api = {\n  key: \"b88dff8725f538c4859707831c1601e6\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === 'Enter') {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      });\n    }\n  }\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n let day = days[d.getDay()];\n let date = d.getDate();\n let month = months[d.getMonth()];\n let year = d.getFullYear();\n\n return `${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.weather[0].main === 'Rain') ? 'app rain' : (weather.weather[0].main === 'Mist') ? 'app mist' : (weather.weather[0].main === 'Clouds') ? 'app clouds' : (weather.weather[0].main === 'Snow') ? 'app snow' : 'app') : 'app'}>\n        <main>\n          <div className='search-box'>\n            <input type='text'\n            className='search-bar'\n            placeholder='Search...'\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}/>\n          </div>\n          {(typeof weather.main != 'undefined') ?(\n            <div>\n          <div className='location-box'>\n            <div className='location'>{weather.name}, {weather.sys.country}</div>\n            <div className='date'>{dateBuilder(new Date())}</div>\n          </div>\n          <div className='weather-box'>\n            <div className='temp'>\n              {Math.round(weather.main.temp)}Â°c\n            </div>\n            <div className='weather'>\n              {weather.weather[0].main}\n            </div>\n          </div> \n          </div>) : ('')}\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}